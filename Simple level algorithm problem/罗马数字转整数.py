
# 问题：
# 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
# 字符          数值
# I             1
# V             5
# X             10
# L             50
# C             100
# D             500
# M             1000
# 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，
# 即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
# 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，
# 例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，
# 所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。
# 这个特殊的规则只适用于以下六种情况：
# I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
# X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
# C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
# 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。
#------+---------+-----------+-----------+------------+--------------+-
#      |  示例 1 |   示例 2   |   示例 3  |  示例 4    |  示例 5
#------+---------+-----------+-----------+------------+--------------+-
# 输入:|  "III"  |   "IV"    |   "IX"    |  "LVIII"   | "MCMXCIV"
#------+---------+-----------+-----------+------------+--------------+-
# 输出:|   3     |    4      |    9      |    58      |   1994
#------+--------+------------+-----------+------------+--------------+-
# 解释:|         |           |           |  L = 50,   |  M = 1000,
#      |         |           |           |  V= 5      |  CM = 900,
#      |         |           |           |  III = 3   |  XC = 90,
#      |         |           |           |  III = 3   |  IV = 4.
#------+--------+------------+----------+-------------+--------------+-
#


class RomanProblem(object):
    @staticmethod
    def roman_to_int(roman_num):
        roman_dict = {"I": 1,
                      "V": 5,
                      "X": 10,
                      "L": 50,
                      "C": 100,
                      "D": 500,
                      "M": 1000}
        temp_sum = 0
        for i, char in enumerate(roman_num):
            if i < len(roman_num) - 1 and roman_dict[roman_num[i]] < roman_dict[roman_num[i + 1]]:
                temp_sum -= roman_dict[char]
            else:
                temp_sum += roman_dict[char]
        print(temp_sum)


case_num = "IV"
RomanProblem().roman_to_int(case_num)

# 罗马数字由 I,V,X,L,C,D,M 构成；
# 当小值在大值的左边，则减小值，如 IV=5-1=4；
# 当小值在大值的右边，则加小值，如 VI=5+1=6；
# 由上可知，右值永远为正，因此最后一位必然为正。
# 一言蔽之，把一个小值放在大值的左边，就是做减法，否则为加法。
#
# 在代码实现上，可以往后看多一位，对比当前位与后一位的大小关系，从而确定当前位是加还是减法。当没有下一位时，做加法即可。
# 也可保留当前位的值，当遍历到下一位的时，对比保留值与遍历位的大小关系，再确定保留值为加还是减。最后一位做加法即可。

